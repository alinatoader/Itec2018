{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/add/operator/debounceTime.js","webpack:///./node_modules/rxjs-compat/_esm5/operator/debounceTime.js","webpack:///./src/app/user/quiz.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAkC;AACyB;AAC3D,+CAAU,0BAA0B,mEAAY;AAChD,wC;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAsC;AACuB;AAC7D;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA,WAAW,UAAU,iCAAiC,oBAAoB;AAC1E;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACO;AACP,+BAA+B,aAAa,mDAAc,CAAC;AAC3D,WAAW,mEAAW;AACtB;AACA,wC;;;;;;;;;;;;;;;;;;;;;;;;;ACpDmD;AACD;AAKlD;IAII,qBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAHpC,iDAAiD;QACjD,WAAM,GAAC,uBAAuB,CAAC;IAES,CAAC;IAEzC,kCAAY,GAAZ,UAAa,MAAc;QACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,iBAAiB,GAAG,MAAM,CAAC,CAAC;IACnE,CAAC;IAED,gCAAU,GAAV,UAAW,MAAU;QACjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC;IAED,sCAAgB,GAAhB,UAAiB,KAAY,EAAE,MAAc;QACzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,UAAU,GAAG,KAAK,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC;IAC1E,CAAC;IAED,4BAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC;IAChD,CAAC;IApBQ,WAAW;QAHvB,gEAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;yCAK4B,+DAAU;OAJ3B,WAAW,CAqBvB;IAAD,kBAAC;CAAA;AArBuB","file":"common.js","sourcesContent":["import { Observable } from 'rxjs';\nimport { debounceTime } from '../../operator/debounceTime';\nObservable.prototype.debounceTime = debounceTime;\n//# sourceMappingURL=debounceTime.js.map","import { asyncScheduler } from 'rxjs';\nimport { debounceTime as higherOrder } from 'rxjs/operators';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=asyncScheduler] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\n    return higherOrder(dueTime, scheduler)(this);\n}\n//# sourceMappingURL=debounceTime.js.map","import { OnInit, Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class QuizService {\r\n    //apiUrl = 'https://apiitec2018tm.herokuapp.com';\r\n    apiUrl='http://localhost:8080';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getQuestions(quizId: number) {\r\n        return this.http.get(this.apiUrl + '/question/test/' + quizId);\r\n    }\r\n\r\n    postResult(result:any){\r\n        return this.http.post(this.apiUrl + '/result', result);\r\n    }\r\n\r\n    getQuizCompleted(email:string, quizId: number){\r\n        return this.http.get(this.apiUrl + '/result/' + email + '/' + quizId);\r\n    }\r\n\r\n    getAll() {\r\n        return this.http.get(this.apiUrl + '/quiz');\r\n    }\r\n}"],"sourceRoot":""}